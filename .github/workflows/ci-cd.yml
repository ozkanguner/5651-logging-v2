name: LogMaster v2 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: logmaster-v2

jobs:
  # Code Quality & Security Checks
  quality-checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy safety bandit
        pip install -r backend/requirements.txt
    
    - name: Code formatting check (Black)
      run: black --check backend/
    
    - name: Import sorting check (isort)
      run: isort --check-only backend/
    
    - name: Linting (flake8)
      run: flake8 backend/
    
    - name: Type checking (mypy)
      run: mypy backend/app/ || true
    
    - name: Security scan (bandit)
      run: bandit -r backend/app/
    
    - name: Dependency vulnerability scan
      run: safety check -r backend/requirements.txt

  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    needs: quality-checks
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: logmaster_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
        options: >-
          --health-cmd "curl -f http://localhost:9200/_health"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
        ports:
          - 9200:9200
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
    
    - name: Run tests
      env:
        ENVIRONMENT: testing
        LOGMASTER_POSTGRES_HOST: localhost
        LOGMASTER_POSTGRES_PORT: 5432
        LOGMASTER_POSTGRES_USER: postgres
        LOGMASTER_POSTGRES_PASSWORD: test_password
        LOGMASTER_POSTGRES_DB: logmaster_test
        LOGMASTER_REDIS_URL: redis://localhost:6379
        LOGMASTER_ELASTICSEARCH_URL: http://localhost:9200
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run linting
      run: |
        cd frontend
        npm run lint
    
    - name: Run tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # Docker Build & Push
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: backend/
        push: true
        tags: ${{ env.REGISTRY }}/${{ github.repository }}/backend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: frontend/
        push: true
        tags: ${{ env.REGISTRY }}/${{ github.repository }}/frontend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/backend:${{ github.sha }}
        format: 'sarif'
        output: 'backend-trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'backend-trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/logmaster/5651-logging-v2
          git pull origin main
          docker-compose down
          docker-compose pull
          docker-compose up -d
          
          # Wait for services to start
          sleep 30
          
          # Health check
          if curl -f http://localhost:8000/health; then
            echo "‚úÖ Staging deployment successful"
          else
            echo "‚ùå Staging deployment failed"
            exit 1
          fi

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production server
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/logmaster/5651-logging-v2
          
          # Backup current version
          docker-compose exec -T postgresql pg_dump -U logmaster logmaster_v2 > backup_$(date +%Y%m%d_%H%M%S).sql
          
          # Deploy new version
          git pull origin main
          docker-compose down
          docker-compose pull
          docker-compose up -d
          
          # Wait for services to start
          sleep 60
          
          # Health check
          if curl -f http://localhost:8000/health; then
            echo "‚úÖ Production deployment successful"
            
            # Send success notification
            curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
              -H 'Content-type: application/json' \
              --data '{"text":"üöÄ LogMaster v2 successfully deployed to production!"}'
          else
            echo "‚ùå Production deployment failed"
            
            # Rollback
            git checkout HEAD~1
            docker-compose down
            docker-compose up -d
            
            # Send failure notification
            curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
              -H 'Content-type: application/json' \
              --data '{"text":"‚ùå LogMaster v2 production deployment failed! Rolled back to previous version."}'
            
            exit 1
          fi

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run performance tests
      run: |
        k6 run tests/performance/api-load-test.js
      env:
        K6_STAGING_URL: ${{ secrets.STAGING_URL }}

  # Compliance Check
  compliance-check:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 5651 Compliance Verification
      run: |
        echo "üîç Running 5651 Turkish Law compliance checks..."
        
        # Check digital signature implementation
        python3 -c "
        import sys
        sys.path.append('backend')
        from app.compliance.checker import ComplianceChecker
        
        checker = ComplianceChecker()
        results = checker.run_compliance_audit()
        
        if results['score'] >= 95:
            print('‚úÖ 5651 Compliance: PASSED')
            exit(0)
        else:
            print('‚ùå 5651 Compliance: FAILED')
            print(f'Compliance Score: {results[\"score\"]}%')
            exit(1)
        "

  # Documentation Update
  update-docs:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate API documentation
      run: |
        cd backend
        python3 -c "
        from app.main import app
        import json
        
        # Generate OpenAPI spec
        with open('../docs/api/openapi.json', 'w') as f:
            json.dump(app.openapi(), f, indent=2)
        "
    
    - name: Update deployment docs
      run: |
        echo '# Latest Deployment' > docs/deployment/latest.md
        echo "- **Version**: $(git describe --tags)" >> docs/deployment/latest.md
        echo "- **Deployed**: $(date)" >> docs/deployment/latest.md
        echo "- **Commit**: ${{ github.sha }}" >> docs/deployment/latest.md
    
    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/
        git diff --staged --quiet || git commit -m "üìö Update documentation [skip ci]"
        git push 