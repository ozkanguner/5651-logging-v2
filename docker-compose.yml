version: '3.8'

services:
  # PostgreSQL Database
  postgresql:
    image: postgres:15-alpine
    container_name: logmaster-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: logmaster_v2
      POSTGRES_USER: logmaster
      POSTGRES_PASSWORD: logmaster_secure_2024
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - logmaster-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U logmaster -d logmaster_v2"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Elasticsearch for Log Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: logmaster-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./infrastructure/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - logmaster-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: logmaster-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass "redis_secure_2024"
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - logmaster-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # LogMaster Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: logmaster-backend
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - LOGMASTER_POSTGRES_HOST=postgresql
      - LOGMASTER_POSTGRES_PORT=5432
      - LOGMASTER_POSTGRES_USER=logmaster
      - LOGMASTER_POSTGRES_PASSWORD=logmaster_secure_2024
      - LOGMASTER_POSTGRES_DB=logmaster_v2
      - LOGMASTER_ELASTICSEARCH_URL=http://elasticsearch:9200
      - LOGMASTER_REDIS_URL=redis://redis:6379
      - LOGMASTER_REDIS_PASSWORD=redis_secure_2024
      - LOGMASTER_SECRET_KEY=your-super-secret-key-change-in-production
      - LOGMASTER_LOG_BASE_PATH=/var/log/logmaster
      - LOGMASTER_DEBUG=false
    volumes:
      - logs_data:/var/log/logmaster
      - certs_data:/opt/logmaster/certs
      - backup_data:/backup/logmaster
      - ./backend/app:/app
    ports:
      - "8000:8000"
    networks:
      - logmaster-network
    depends_on:
      postgresql:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # LogMaster Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: logmaster-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://backend:8000
      - REACT_APP_ENVIRONMENT=production
    ports:
      - "3000:3000"
    networks:
      - logmaster-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: logmaster-nginx
    restart: unless-stopped
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/ssl/certs
      - logs_data:/var/log/logmaster:ro
    ports:
      - "80:80"
      - "443:443"
      - "514:514/udp"  # Syslog port
    networks:
      - logmaster-network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: logmaster-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - logmaster-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: logmaster-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana_admin_2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - logmaster-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/login || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Filebeat for Log Collection
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: logmaster-filebeat
    restart: unless-stopped
    user: root
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    volumes:
      - ./infrastructure/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - logs_data:/var/log/logmaster:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - logmaster-network
    depends_on:
      - elasticsearch
    command: filebeat -e -strict.perms=false

  # Log Processor Worker
  log-processor:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: logmaster-log-processor
    restart: unless-stopped
    environment:
      - WORKER_TYPE=log_processor
      - LOGMASTER_POSTGRES_HOST=postgresql
      - LOGMASTER_ELASTICSEARCH_URL=http://elasticsearch:9200
      - LOGMASTER_REDIS_URL=redis://redis:6379
      - LOGMASTER_LOG_BASE_PATH=/var/log/logmaster
    volumes:
      - logs_data:/var/log/logmaster
      - certs_data:/opt/logmaster/certs
    networks:
      - logmaster-network
    depends_on:
      - postgresql
      - elasticsearch
      - redis

  # Digital Signer Worker
  digital-signer:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: logmaster-digital-signer
    restart: unless-stopped
    environment:
      - WORKER_TYPE=digital_signer
      - LOGMASTER_POSTGRES_HOST=postgresql
      - LOGMASTER_LOG_BASE_PATH=/var/log/logmaster
      - LOGMASTER_PRIVATE_KEY_PATH=/opt/logmaster/certs/private.pem
      - LOGMASTER_PUBLIC_KEY_PATH=/opt/logmaster/certs/public.pem
    volumes:
      - logs_data:/var/log/logmaster
      - certs_data:/opt/logmaster/certs
    networks:
      - logmaster-network
    depends_on:
      - postgresql

  # Compliance Reporter
  compliance-reporter:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: logmaster-compliance-reporter
    restart: unless-stopped
    environment:
      - WORKER_TYPE=compliance_reporter
      - LOGMASTER_POSTGRES_HOST=postgresql
      - LOGMASTER_ELASTICSEARCH_URL=http://elasticsearch:9200
    volumes:
      - logs_data:/var/log/logmaster
      - backup_data:/backup/logmaster
    networks:
      - logmaster-network
    depends_on:
      - postgresql
      - elasticsearch

  # System Monitor
  system-monitor:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: logmaster-system-monitor
    restart: unless-stopped
    environment:
      - WORKER_TYPE=system_monitor
      - LOGMASTER_POSTGRES_HOST=postgresql
      - LOGMASTER_ELASTICSEARCH_URL=http://elasticsearch:9200
      - LOGMASTER_REDIS_URL=redis://redis:6379
    volumes:
      - logs_data:/var/log/logmaster:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - logmaster-network
    depends_on:
      - postgresql
      - elasticsearch
      - redis

networks:
  logmaster-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgresql

  elasticsearch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/elasticsearch

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis

  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus

  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana

  logs_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/logmaster

  certs_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/logmaster/certs

  backup_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /backup/logmaster 